#!/bin/bash -e

# This a helper function to output floating point/decimal division
# It takes two integer arguments and divides them to return the decimal value
# https://stackoverflow.com/questions/12722095/how-do-i-use-floating-point-division-in-bash
div() {
  local _d=${3:-2}
  local _n=00000000
  _n=${_n:0:$_d}
  local _r=$(($1$_n/$2))
  _r=${_r:0:-$_d}.${_r: -$_d}
  echo $_r
}

############################################################################
# Function dims takes a file with a numbers matrix as an argument and prints 
# the dimensions of the matrix as the number of rows, followed by a space, 
# then the number of columns.
############################################################################
dims(){
	if [ "$#" -eq 1 ] #If number of arguments is 1
	then
		#Get nummer of lines and display without the iflle's name
		lineCnt=$( wc --lines $1 | cut -d' ' --fields=1 ) 

		#Get the first line and count the number of words
		colCnt=$( head --lines=1 $1 | wc -w )

		#output results
		echo "$lineCnt $colCnt"
	else
		#Number of supplied arguments is not 1
		echo "Invalid number of supplied arguments"
		exit 1
	fi
}

############################################################################
# Function transpose takes a file with a numbers matrix as an argument and  
# reflects the elements of the matrix along the main diagonal. 
# Thus, an MxN matrix becomes an NxM matrix and the values along the main diagonal 
# remain unchanged. Use of array is discouraged.
############################################################################
transpose(){

	if [ "$#" != 1 ] #If number of arguments != 1
	then
		echo "Invalid number of supplied arguments"
		exit 1
	fi
	
	#Get nummer of lines and columns in argument file
	lineCnt=$( wc --lines $1 | cut -d' ' --fields=1 ) 
	colCnt=$( head --lines=1 $1 | wc -w )

	# Create one file for each column
	x=$colCnt
	while [ $x -gt 0 ]; 
	do 
		# Create new temp file or clear previously created files
		touch tr_temp_$x
		printf "" > tr_temp_$x
		x=$(($x-1))
	done

	# Store numbers in temp file in single row
	# Each column in argument file is transposed 
	# into a row in temp file
	while read line
	do
		#track column count
		c_cnt=1
		for i in $line
		do
			# Write the number into a file
			printf "$i\t" >> tr_temp_$c_cnt
			c_cnt=`expr $c_cnt + 1 `
		done
	done < $1 # Read file supplied in argument 1

	# cat out temp files in ascending order
	COUNTER=1
	while [  $COUNTER -le $colCnt ]
	do
		cat tr_temp_$COUNTER
		printf "\n"
		#echo $( cat tr_temp_$COUNTER ) 
		let COUNTER=COUNTER+1 
	done
	
	#remov temp files
	find . -maxdepth 1 -name "tr_temp_*" -exec rm -f {} \;
}

############################################################################
# mean should take an MxN matrix and return an 1xN row vector, where the first 
# element is the mean of column one, the second element is the mean of column two, 
# and so on. Do not use any other languages other than bash shell scripting: 
# this means that, among others, awk, sed, tcl, bc, perl, & the python languages 
# and tools are off-limits for this assignment.
############################################################################
mean () {
	trap "find . -maxdepth 1 -name 'mean_temp.*' -exec rm -f {} \;" INT HUP TERM
	if [ "$#" != 1 ] #If number of arguments != 1
	then
		echo "Invalid number of supplied arguments"
		exit 1
	fi
	
	#Get nummer of lines and columns in argument file
	lineCnt=$( wc --lines $1 | cut -d' ' --fields=1 ) 
	colCnt=$( head --lines=1 $1 | wc -w )
	pid=$$

	# Create one file for each column
	x=$colCnt
	while [ $x -gt 0 ]; 
	do 
		# Create new temp file or clear previously created files
		touch mean_temp.$x
		#printf "" > mean_temp.$x
		x=$(($x-1))
	done

	# Store numbers in temp file in single row
	# Each column in argument file is transposed 
	# into a row in temp file
	while read line
	do
		#track column count
		c_cnt=1
		for i in $line
		do
			# Write the number into a file
			printf "$i " >> mean_temp.$c_cnt
			c_cnt=$(expr $c_cnt + 1 )
		done
	done < $1 # Read file supplied in argument 1
	
	# Calculate the mean and store it in a temp file
	cnt=1
	touch mean_temp.o # Create temp file
	while [ $cnt -le $colCnt ]
	do
		printf "\n" >> mean_temp.$cnt
		while read line
		do
			# Sum the numbers
			sum=0
			for i in $line
			do
				sum=$( expr $sum + $i )
			done
		done < mean_temp.$cnt
		# Calculate mean and output to temp file
		printf "$( div $sum $lineCnt ) " >> mean_temp.o
		cnt=$(expr $cnt + 1 )
	done

	#Output results and remove temp files
	cat mean_temp.o	
	find . -maxdepth 1 -name 'mean_temp*' -exec rm -f {} \;
}

$1 "${@:2}"
echo -e "\n$1 exit with $?"


