#!/bin/bash -e
cleanup(){
	find . -maxdepth 1 -name 'mean_temp*' -exec rm -f {} \;
	find . -maxdepth 1 -name 'outp_*' -exec rm -f {} \;
	find . -maxdepth 1 -name 'tr_*' -exec rm -f {} \;
}

############################################################################
# Function dims takes a file with a numbers matrix as an argument and prints
# the dimensions of the matrix as the number of rows, followed by a space,
# then the number of columns. Do not use any other languages other than bash 
# shell scripting: this means that, among others, awk, sed, tcl, bc, perl, 
# & the python languages and tools are off-limits. Use of array is discouraged.
############################################################################
dims(){
  lineCnt=0
  while read myLine; do
    lineCnt=$(($lineCnt + 1))
  done < $1

	#Get the first line and count the number of words
	colCnt=$( head --lines=1 $1 | wc -w )
  echo -e "$lineCnt $colCnt"
}

############################################################################
# Function transpose takes a file with a numbers matrix as an argument and
# reflects the elements of the matrix along the main diagonal.
# Do not use any other languages other than bash shell scripting: this means that,
# among others, awk, sed, tcl, bc, perl, & the python languages
# and tools are off-limits. Thus, an MxN matrix becomes an NxM matrix and 
# the values along the main diagonal remain unchanged. Use of array is discouraged.
############################################################################
transpose(){
	trap "rm -f tr_temp_*; echo 'CTRL+C received, exiting'; exit 1; " INT HUP TERM
	
	touch outp_tr$$
  printf "" > outp_tr$$

	# Read the input into a temp file
    while read line; do
		c_cnt=1
		for i in $line; do
			printf "%s\t" $i >> outp_tr$$
			c_cnt=$(($c_cnt + 1))
		done
	        printf "\n" >> outp_tr$$
    done < $1

	#Get nummer of lines and columns in argument file
	lineCnt=$( wc --lines outp_tr$$ | cut -d' ' --fields=1 )
	colCnt=$( head --lines=1 outp_tr$$ | wc -w )

	# Create one file for each column
	x=$colCnt
	while [ $x -gt 0 ]; do
		# Create new temp file or clear previously created files
		touch tr_temp_$x
		printf "" > tr_temp_$x
		x=$(($x-1))
	done

	# Store numbers in temp file in single row
	# Each column in argument file is transposed
	# into a row in temp file
	while read line; do
		#track column count
		c_cnt=1
		for i in $line; do
			# Write the number into a file
			printf "%s\t" $i >> tr_temp_$c_cnt
			c_cnt=`expr $c_cnt + 1 `
		done
	done < outp_tr$$ # Read file supplied in argument 1

	# cat out temp files in ascending order
	cntr=1
	printf "" > outp_tr$$
	while [ $cntr -le $colCnt ]; do
		cat tr_temp_$cntr >> outp_tr$$
		truncate -s-1 outp_tr$$
		printf "\n" >> outp_tr$$
		let cntr=cntr+1
	done
	#cat -e -A outp_tr$$
	cat outp_tr$$
	#remov temp files
	find . -maxdepth 1 -name "tr_temp_*" -exec rm -f {} \;
	find . -maxdepth 1 -name "outp_tr*" -exec rm -f {} \;
}

############################################################################
# mean should take an MxN matrix and return an 1xN row vector, where the first
# element is the mean of column one, the second element is the mean of column two,
# and so on. Do not use any other languages other than bash shell scripting:
# this means that, among others, awk, sed, tcl, bc, perl, & the python languages
# and tools are off-limits. Use of array is discouraged.
############################################################################
mean () {
	trap "rm -f mean_temp.*; echo 'CTRL+C received, exiting'; exit 1; " INT HUP TERM

	#Get nummer of lines and columns in argument file
	lineCnt=0
	while read myLine; do
		lineCnt=$(($lineCnt + 1))
	done < $1
	colCnt=$( head --lines=1 $1 | wc -w )

	# Create one file for each column
	x=$colCnt
	while [ $x -gt 0 ];
	do
		# Create new temp file or clear previously created files
		touch mean_temp.$x
		printf "" > mean_temp.$x
		x=$(($x-1))
	done

	# Store numbers in temp file in single row
	# Each column in argument file is transposed
	# into a row in temp file
	while read line
	do
		#track column count
		c_cnt=1
		for i in $line
		do
			# Write the number into a file
			printf "%s " $i >> mean_temp.$c_cnt
			c_cnt=$(expr $c_cnt + 1 )
		done
	done < $1 # Read file supplied in argument 1

	# Calculate the mean and store it in a temp file
	cnt=1
	touch mean_temp$$ # Create temp file
	
	while [ $cnt -le $colCnt ]
	do
		truncate -s-1 mean_temp.$cnt
		printf "\n" >> mean_temp.$cnt
		while read line
		do
			# Sum the numbers
			sum=0
			for i in $line
			do
				sum=$(($sum + $i ))
			done
			#printf "sum: $sum\t"
		done < mean_temp.$cnt
		
		# Calculate mean and output to temp file
		decim=$(( ($sum + ($lineCnt/2)*(($sum > 0)*2-1))/$lineCnt ))
		printf "%s\t" $decim >> mean_temp$$
		cnt=$(expr $cnt + 1 )
	done
	
	truncate -s-1 mean_temp$$
	printf "\n" >> mean_temp$$
	#printf "\n"
	#Output results and remove temp files
	cat -A mean_temp$$
	find . -maxdepth 1 -name 'mean_temp*' -exec rm -f {} \;
}

###################################################################################
# add should take two MxN matrices and add them together element-wise to produce an MxN matrix.
# add should return an error if the matrices do not have the same dimensions.
# Do not use any other languages other than bash shell scripting:
# this means that, among others, awk, sed, tcl, bc, perl, & the python languages
# and tools are off-limits. Use of array is discouraged.
####################################################################################
add(){
	trap "rm -f add_temp.*; echo 'CTRL+C received, exiting'; exit 1; " INT HUP TERM
	find . -maxdepth 1 -name 'add_temp.*' -exec rm -f {} \;

	#Get nummer of lines and columns in first argument file
	lineCnt1=0
	while read myLine; do
		lineCnt1=$(($lineCnt1 + 1))
	done < $1
	colCnt1=$( head --lines=1 $1 | wc -w )

	#Get nummer of lines and columns in second argument file
	lineCnt2=0
	while read myLine; do
		lineCnt2=$(($lineCnt2 + 1))
	done < $2
	colCnt2=$( head --lines=1 $2 | wc -w )
	coldbl=$(($colCnt1 * 2))

	if [ $lineCnt1 -ne $lineCnt2 ] || [ $colCnt1 -ne $colCnt2 ]
	then
		# Supplied matrices are not equal
		echo "Supplied matrices are not equal" 1>&2
		exit 1
	fi

	# Store numbers in seperate temp files
	# track file count
	f_cnt=1
	while read line
	do
		for i in $line
		do
			# Write the number into a file
			printf "%s " $i >> add_temp.$f_cnt
			f_cnt=$(($f_cnt + 1))
		done
	done < $1 # Read file supplied in argument 1

	while read line
	do
		for i in $line
		do
			# Write the number into a file
			printf "%s " $i >> add_temp.$f_cnt
			f_cnt=$(($f_cnt + 1))
		done
	done < $2 # Read file supplied in argument 2

	# Calculate the sums and store in a temp file
	# Create temp file for storing calculated matrix
	cnt=1
	matrix_cnt=$(( $f_cnt / 2 ))
	touch add_temp.o
	printf "" > add_temp.o
	
	while [ $cnt -le $matrix_cnt ]
	do
		cnt2=$(($cnt + $matrix_cnt))

		# Sum the numbers. Take number from current file
		# and add it with the number from (current file + numer of entries in matrix)
		sum=0
		truncate -s-1 add_temp.$cnt
		printf "\n" >> add_temp.$cnt
		while read line
		do
			for i in $line
			do
				sum=$(($sum + $i ))
			done
		done < add_temp.$cnt

		truncate -s-1 add_temp.$cnt2
		printf "\n" >> add_temp.$cnt2
		while read line
		do
			for i in $line
			do
				sum=$(($sum + $i ))
			done
		done < add_temp.$cnt2

		# Form summed matrix
		if (( $cnt % $colCnt1 != 0 ))
		then
			# delimitate with tab
			printf "%s\t" $sum >> add_temp.o
		else
			# delimitate with new line
			printf "%s\n" $sum >> add_temp.o
		fi
		cnt=$(($cnt + 1))
	done

	# Output results and remove temp files
	cat add_temp.o
	find . -maxdepth 1 -name 'add_temp*' -exec rm -f {} \;
}


multiply(){
	trap "rm -f p_tmp.*; echo 'CTRL+C received, exiting'; exit 1; " INT HUP TERM

	#Get nummer of lines and columns in first argument file
	lineCnt1=0
	while read myLine; do
		lineCnt1=$(($lineCnt1 + 1))
	done < $1
	colCnt1=$( head --lines=1 $1 | wc -w )

	#Get nummer of lines and columns in second argument file
	lineCnt2=0
	while read myLine; do
		lineCnt2=$(($lineCnt2 + 1))
	done < $2
	colCnt2=$( head --lines=1 $2 | wc -w )
	#printf "l1: $lineCnt1; c1: $colCnt1\nl2: $lineCnt2; c2: $colCnt2\n"
	
	if [ $colCnt1 != $lineCnt2 ]; then
		#Number of supplied arguments is not 2
		echo "Matrices' are not compatible" 1>&2
		exit 1
	fi

	# Store numbers in seperate temp files. Track file count
	l=1
	while read line; do
		f=1
		for i in $line; do
			# Write the number into a file. Name the file with col and row index
			printf "" > p_tmp.1.$l.$f
			printf "%s\n" $i >> p_tmp.1.$l.$f
			f=$(($f + 1))
		done
		l=$(($l + 1))
	done < $1 # Read file supplied in argument 1

	l=1
	while read line; do
		f=1
		for i in $line; do
			# Write the number into a file. Name the file with col and row index
			printf "" > p_tmp.2.$l.$f
			printf "%s " $i >> p_tmp.2.$l.$f
			f=$(($f + 1))
		done
		l=$(($l + 1))
	done < $2 # Read file supplied in argument 2

	printf "" > p_tmp.o # output file
	cntr=1
	m1rows=1
	while [ $m1rows -le $lineCnt1 ] ;do # Iterate each row in m1
		m2cols=1
		while [ $m2cols -le $colCnt2 ]; do # Iterate each column in m2
			m2rows=1
			sum=0
			while [ $m2rows -le $lineCnt2 ]; do # Iterate each row in m2
				# Multiply m1 file and m2 file then add result to running sum
				truncate -s-1 p_tmp.1.$m2cols.$m2rows
				printf "\n" >> p_tmp.1.$m2cols.$m2rows
				n1=0
				while read line
				do
					for i in $line
					do
						n1=$i
					done
				done < p_tmp.1.$m2cols.$m2rows
				printf "n1: $n1\n"

				truncate -s-1 p_tmp.2.$m2rows.$m1rows
				printf "\n" >> p_tmp.2.$m2rows.$m1rows
				n2=0
				while read line
				do
					for i in $line
					do
						n2=$i
					done
				done < p_tmp.2.$m2rows.$m1rows
				printf "n2: $n2\n"

				# n1=$( head -c1 p_tmp.1.$m2cols.$m2rows )
				# n2=$( head -c1 p_tmp.2.$m2rows.$m1rows )
				sum=$(($sum + $n1 * $n2))
				printf "s : $sum\n"
				m2rows=$(($m2rows + 1))
			done
			#printf "$sum\t" >> p.tmp_o # Write each product sum
			
			if [ $cntr == $colCnt2 ]
			then
				printf "%s\n" $sum >> p_tmp.o # Write each product sum
				cntr=1
			else
				printf "%s\t" >> $sum p_tmp.o # Write each product sum
				cntr=$(($cntr+1))
			fi

			m2cols=$(($m2cols + 1))
		done
		m1rows=$(($m1rows + 1))
	done
	transpose p_tmp.o

	# Output results and remove temp files
	find . -maxdepth 1 -name 'p_tmp.*' -exec rm -f {} \;
}

#mean m_5

if [[ $# > 3 ]]; then echo "Too many arguments passed" 1>&2; exit 1; fi
# Condition prechecks for dims and mean functions
if [ $1 = "mean" ] || [ $1 = "dims" ] ; then
  if [ ! -f $2 ] ; then echo "Invalid file" 1>&2; exit 1; fi
  if [[ $# > 2 ]] ; then echo "Too many arguments passed" 1>&2; exit 1; fi
  if [[ $# > 1 ]] ; then fileOne=$2; fileTwo=$3; fi
  if [[ $# == 1 ]] ; then fileOne=tmp; cat > $fileOne; fi
  if [ $1 = "dims" ]; then dims $fileOne; fi
  if [ $1 = "mean" ]; then mean $fileOne; fi
fi

# Condition prechecks for transpose
if [ $1 = "transpose" ]; then
	if [[ $# > 2 ]]; then echo "Invalid number of arguments" 1>&2; exit 1;
	elif [ $# -gt 1 ]; then fileOne=$2; fileTwo=$3
	elif [ $# -eq 1 ]; then fileOne=tmp; cat > $fileOne
	fi
	if [ ! -r $2 ]; then echo "Invalid file" 1>&2; exit 1; fi
	transpose $fileOne
fi

# Condition prechecks for add
if [ $1 = "add" ]; then 
	if [[ $# == 0 ]]; then echo "No arguments to add" 1>&2; exit 1; fi
	if [ $# -gt 3 ]; then echo "Invalid number of arguments" 1>&2; exit 1; fi
	if [ ! -r $2 ] || [ ! -r $3 ]; then echo "Invalid file" 1>&2; exit 1; fi
	if [[ $# == 3 ]] ; then fileOne=$2; fileTwo=$3; fi
	add $fileOne $fileTwo
fi


if [ $1 = "multiply" ]; then 
	if [[ $# == 0 ]]; then echo "No arguments to add" 1>&2; exit 1; fi
	if [ $# -gt 3 ]; then echo "Invalid number of arguments" 1>&2; exit 1; fi
	if [ ! -r $2 ] || [ ! -r $3 ]; then echo "Invalid file" 1>&2; exit 1; fi
	if [[ $# == 3 ]] ; then fileOne=$2; fileTwo=$3; fi
	#echo Calling multp
	multiply $fileOne $fileTwo
fi